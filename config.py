{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Overview of Colaboratory Features",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/abhay43/Human_Pose_Detection/blob/master/config.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "H-ExbYnAXgMj",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "\"\"\"\n",
        "Mask R-CNN\n",
        "Base Configurations class.\n",
        "\n",
        "Copyright (c) 2017 Matterport, Inc.\n",
        "Licensed under the MIT License (see LICENSE for details)\n",
        "Written by Waleed Abdulla\n",
        "\"\"\"\n",
        "\n",
        "import math\n",
        "import numpy as np\n",
        "\n",
        "\n",
        "# Base Configuration Class\n",
        "# Don't use this class directly. Instead, sub-class it and override\n",
        "# the configurations you need to change.\n",
        "\n",
        "class Config(object):\n",
        "    \"\"\"Base configuration class. For custom configurations, create a\n",
        "    sub-class that inherits from this one and override properties\n",
        "    that need to be changed.\n",
        "    \"\"\"\n",
        "    # Name the configurations. For example, 'COCO', 'Experiment 3', ...etc.\n",
        "    # Useful if your code needs to do things differently depending on which\n",
        "    # experiment is running.\n",
        "    NAME = None  # Override in sub-classes\n",
        "\n",
        "    # NUMBER OF GPUs to use. For CPU training, use 1\n",
        "    GPU_COUNT = 1\n",
        "\n",
        "    # Number of images to train with on each GPU. A 12GB GPU can typically\n",
        "    # handle 2 images of 1024x1024px.\n",
        "    # Adjust based on your GPU memory and image sizes. Use the highest\n",
        "    # number that your GPU can handle for best performance.\n",
        "    IMAGES_PER_GPU = 2\n",
        "\n",
        "    # Number of training steps per epoch\n",
        "    # This doesn't need to match the size of the training set. Tensorboard\n",
        "    # updates are saved at the end of each epoch, so setting this to a\n",
        "    # smaller number means getting more frequent TensorBoard updates.\n",
        "    # Validation stats are also calculated at each epoch end and they\n",
        "    # might take a while, so don't set this too small to avoid spending\n",
        "    # a lot of time on validation stats.\n",
        "    STEPS_PER_EPOCH = 5000\n",
        "\n",
        "    # Number of validation steps to run at the end of every training epoch.\n",
        "    # A bigger number improves accuracy of validation stats, but slows\n",
        "    # down the training.\n",
        "    VALIDATION_STEPS = 50\n",
        "\n",
        "    # The strides of each layer of the FPN Pyramid. These values\n",
        "    # are based on a Resnet101 backbone.\n",
        "    BACKBONE_STRIDES = [4, 8, 16, 32, 64]\n",
        "\n",
        "    # Number of classification classes (including background)\n",
        "    NUM_CLASSES = 1  # Override in sub-classes\n",
        "\n",
        "    NUM_KEYPOINTS = 17 #Override in sub-classes\n",
        "\n",
        "    # Length of square anchor side in pixels\n",
        "    RPN_ANCHOR_SCALES = (32, 64, 128, 256, 512)\n",
        "\n",
        "    # Ratios of anchors at each cell (width/height)\n",
        "    # A value of 1 represents a square anchor, and 0.5 is a wide anchor\n",
        "    RPN_ANCHOR_RATIOS = [0.5, 1, 2]\n",
        "\n",
        "    # Anchor stride\n",
        "    # If 1 then anchors are created for each cell in the backbone feature map.\n",
        "    # If 2, then anchors are created for every other cell, and so on.\n",
        "    RPN_ANCHOR_STRIDE = 1\n",
        "\n",
        "    # Non-max suppression threshold to filter RPN proposals.\n",
        "    # You can reduce this during training to generate more propsals.\n",
        "    RPN_NMS_THRESHOLD = 0.7\n",
        "\n",
        "    # How many anchors per image to use for RPN training\n",
        "    RPN_TRAIN_ANCHORS_PER_IMAGE = 256\n",
        "\n",
        "    # ROIs kept after non-maximum supression (training and inference)\n",
        "    POST_NMS_ROIS_TRAINING = 2000\n",
        "    POST_NMS_ROIS_INFERENCE = 1000\n",
        "\n",
        "    # If enabled, resizes instance masks to a smaller size to reduce\n",
        "    # memory load. Recommended when using high-resolution images.\n",
        "    USE_MINI_MASK = True\n",
        "    MINI_MASK_SHAPE = (56, 56)  # (height, width) of the mini-mask\n",
        "\n",
        "    # Input image resing\n",
        "    # Images are resized such that the smallest side is >= IMAGE_MIN_DIM and\n",
        "    # the longest side is <= IMAGE_MAX_DIM. In case both conditions can't\n",
        "    # be satisfied together the IMAGE_MAX_DIM is enforced.\n",
        "    IMAGE_MIN_DIM = 800\n",
        "    IMAGE_MAX_DIM = 1024\n",
        "    # If True, pad images with zeros such that they're (max_dim by max_dim)\n",
        "    IMAGE_PADDING = True  # currently, the False option is not supported\n",
        "\n",
        "    # Image mean (RGB)\n",
        "    MEAN_PIXEL = np.array([123.7, 116.8, 103.9])\n",
        "\n",
        "    # Number of ROIs per image to feed to classifier/mask heads\n",
        "    # The Mask RCNN paper uses 512 but often the RPN doesn't generate\n",
        "    # enough positive proposals to fill this and keep a positive:negative\n",
        "    # ratio of 1:3. You can increase the number of proposals by adjusting\n",
        "    # the RPN NMS threshold.\n",
        "    TRAIN_ROIS_PER_IMAGE = 200\n",
        "\n",
        "    # Percent of positive ROIs used to train classifier/mask heads\n",
        "    ROI_POSITIVE_RATIO = 0.33\n",
        "\n",
        "    # Pooled ROIs\n",
        "    POOL_SIZE = 7\n",
        "    MASK_POOL_SIZE = 14\n",
        "    MASK_SHAPE = [28, 28]\n",
        "\n",
        "    # Maximum number of ground truth instances to use in one image\n",
        "    MAX_GT_INSTANCES = 100\n",
        "\n",
        "    # Bounding box refinement standard deviation for RPN and final detections.\n",
        "    RPN_BBOX_STD_DEV = np.array([0.1, 0.1, 0.2, 0.2])\n",
        "    BBOX_STD_DEV = np.array([0.1, 0.1, 0.2, 0.2])\n",
        "\n",
        "    # Max number of final detections\n",
        "    DETECTION_MAX_INSTANCES = 100\n",
        "\n",
        "    # Minimum probability value to accept a detected instance\n",
        "    # ROIs below this threshold are skipped\n",
        "    DETECTION_MIN_CONFIDENCE = 0.7\n",
        "\n",
        "    # Non-maximum suppression threshold for detection\n",
        "    DETECTION_NMS_THRESHOLD = 0.3\n",
        "\n",
        "    # Learning rate and momentum\n",
        "    # The Mask RCNN paper uses lr=0.02, but on TensorFlow it causes\n",
        "    # weights to explode. Likely due to differences in optimzer\n",
        "    # implementation.\n",
        "    LEARNING_RATE = 0.001\n",
        "    LEARNING_MOMENTUM = 0.9\n",
        "\n",
        "    # Weight decay regularization\n",
        "    WEIGHT_DECAY = 0.0001\n",
        "\n",
        "    # Use RPN ROIs or externally generated ROIs for training\n",
        "    # Keep this True for most situations. Set to False if you want to train\n",
        "    # the head branches on ROI generated by code rather than the ROIs from\n",
        "    # the RPN. For example, to debug the classifier head without having to\n",
        "    # train the RPN.\n",
        "    USE_RPN_ROIS = True\n",
        "\n",
        "    def __init__(self):\n",
        "        \"\"\"Set values of computed attributes.\"\"\"\n",
        "        # Effective batch size\n",
        "        self.BATCH_SIZE = self.IMAGES_PER_GPU * self.GPU_COUNT\n",
        "\n",
        "        # Input image size\n",
        "        self.IMAGE_SHAPE = np.array(\n",
        "            [self.IMAGE_MAX_DIM, self.IMAGE_MAX_DIM, 3])\n",
        "\n",
        "        # Compute backbone size from input image size\n",
        "        self.BACKBONE_SHAPES = np.array(\n",
        "            [[int(math.ceil(self.IMAGE_SHAPE[0] / stride)),\n",
        "              int(math.ceil(self.IMAGE_SHAPE[1] / stride))]\n",
        "             for stride in self.BACKBONE_STRIDES])\n",
        "\n",
        "    def display(self):\n",
        "        \"\"\"Display Configuration values.\"\"\"\n",
        "        print(\"\\nConfigurations Superlee:\")\n",
        "        for a in dir(self):\n",
        "            if not a.startswith(\"__\") and not callable(getattr(self, a)):\n",
        "                print(\"{:30} {}\".format(a, getattr(self, a)))\n",
        "        print(\"\\n\")\n"
      ],
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fGxHs7VuZt3c",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}